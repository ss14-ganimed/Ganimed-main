using System.Linq;
using Content.Client.Administration.Systems;
using Content.Client.UserInterface.Controls;
using Content.Client.Verbs.UI;
using Content.Shared.Administration;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;

namespace Content.Client.Administration.UI.CustomControls
{
    [GenerateTypedNameReferences]
    public sealed partial class GameRulesListControl : BoxContainer
    {
        private readonly AdminSystem _adminSystem;

        private List<GameRuleInfo> _gameRulesList = new();

        public event Action<GameRuleInfo?>? OnSelectionChanged;
        public IReadOnlyList<GameRuleInfo> PlayerInfo => _gameRulesList;

        public Func<GameRuleInfo, string, string>? OverrideText;
        public Comparison<GameRuleInfo>? Comparison;

        public GameRulesListControl()
        {
            _adminSystem = EntitySystem.Get<AdminSystem>();
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);
            // Fill the Option data
            GameRulesListContainer.ItemPressed += GameRulesListItemPressed;
            GameRulesListContainer.GenerateItem += GenerateButton;

            PopulateList(_adminSystem.GameRulesList);
            _adminSystem.GameRulesListChanged += PopulateList;
            BackgroundPanel.PanelOverride = new StyleBoxFlat { BackgroundColor = new Color(32, 32, 40) };
        }

        private void GameRulesListItemPressed(BaseButton.ButtonEventArgs args, ListData data)
        {
            if (data is not GameRuleListData { Info: var selectedGameRule })
                return;
            if (args.Event.Function == EngineKeyFunctions.UIClick)
            {
                OnSelectionChanged?.Invoke(selectedGameRule);

                // update label text. Only required if there is some override (e.g. unread bwoink count).
                if (OverrideText != null && args.Button.Children.FirstOrDefault()?.Children?.FirstOrDefault() is Label label)
                    label.Text = GetText(selectedGameRule);
            }
            else if (args.Event.Function == EngineKeyFunctions.UseSecondary && selectedGameRule.EntityUid != null)
            {
                IoCManager.Resolve<IUserInterfaceManager>().GetUIController<VerbMenuUIController>().OpenVerbMenu(selectedGameRule.EntityUid.Value);
            }
        }

        private void PopulateList(IReadOnlyList<GameRuleInfo>? gameRules = null)
        {
            gameRules ??= _adminSystem.GameRulesList;

            _gameRulesList = gameRules.ToList();

            if (_gameRulesList is not null)
                GameRulesListContainer.PopulateList(_gameRulesList.Select(info => new GameRuleListData(info)).ToList());
        }

        private string GetText(GameRuleInfo info)
        {
            var text = $"{info.EntityUid} - {info.Name}";
            if (OverrideText != null)
                text = OverrideText.Invoke(info, text);
            return text;
        }

        private void GenerateButton(ListData data, ListContainerButton button)
        {
            if (data is not GameRuleListData { Info: var info })
                return;

            button.AddChild(new BoxContainer
            {
                Orientation = LayoutOrientation.Vertical,
                Children =
                {
                    new Label
                    {
                        ClipText = true,
                        Text = GetText(info)
                    }
                }
            });
            button.EnableAllKeybinds = true;
            button.AddStyleClass(ListContainer.StyleClassListContainerButton);
        }
    }

    public record GameRuleListData(GameRuleInfo Info) : ListData;
}
